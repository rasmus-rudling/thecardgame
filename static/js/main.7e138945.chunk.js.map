{"version":3,"sources":["headerTextCards.png","red_card.png","blue_card.png","start/startView.js","start/startContainer.js","chat/TimerReady.js","chat/Timer.js","chat/otherTeam.js","chat/chatView.js","chat/chatContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","require","StartView","email","setEmail","password","setPassword","setLoginError","loginError","history","useHistory","Container","className","Row","Col","src","alt","id","md","Form","onSubmit","e","preventDefault","auth","signInWithEmailAndPassword","then","push","error","console","log","Group","controlId","Label","Control","type","autoFocus","placeholder","onChange","target","value","Text","Button","Start","TimerReady","currentUsers","useState","seconds","setSeconds","limit","setLimit","useEffect","interval","d","Date","secondStamp","getSeconds","minuteStamp","getMinutes","hourStamp","getHours","strSecondStamp","strMinuteStamp","strHourStamp","firestore","collection","doc","update","messages","FieldValue","arrayUnion","sender","message","timestamp","setInterval","clearInterval","Timer","otherChats","handleChange","randIntNormal","Math","round","randn_bm","min","max","skew","u","v","random","num","sqrt","cos","PI","pow","OtherTeam","setOtherChats","otherTeamNames","forEach","_message","messageElement","document","createElement","rowElement","colElement","imgElementOther","innerText","append","getElementById","objDiv","scrollTop","scrollHeight","tempArray","msg","randomWhiteSpaces","randomSender","length","i","objToPush","ChatView","chats","setChats","name","setName","imgURL","setImgURL","onAuthStateChanged","_usr","a","where","onSnapshot","res","docs","map","_doc","data","filter","_chat","_index","bool","users","user","innerHTML","imgElement","senderImgURL","messageContainer","index","array","fluid","sm","lg","xs","newMessage","focus","span","offset","to","Chat","emailInChat","App","React","setEmailInChat","updatePassword","exact","path","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7e138945.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/headerTextCards.ef84d908.png\";","module.exports = __webpack_public_path__ + \"static/media/red_card.2abfa2da.png\";","module.exports = __webpack_public_path__ + \"static/media/blue_card.db0b65ea.png\";","import React from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {Container, Row, Col, Form, Button} from 'react-bootstrap';\r\n\r\nconst firebase = require('firebase');\r\n\r\n//import * as ROUTES from '../constants/routes.js';\r\n//^won't be needed\r\n\r\n\r\nfunction StartView({email, setEmail, password, setPassword, loginError, setLoginError}) {\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Container className=\"startContainer\">\r\n        <Row>\r\n            <Col>\r\n                <img src={require('../headerTextCards.png')}  alt=\"THE CARD GAME\" id=\"headerimg\"></img>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n                <div id=\"text\">\r\n                    Välkommen till The Card Game! Här är reglerna: Lorem ipsum dolor sit amet, no consequat assueverit honestatis vix. Nam an error mundi veritus, quem tractatos at sea. Eos cu soleat graece. Volumus repudiandae pri eu, ad usu veniam propriae assueverit. Mundi primis aperiam an eam, facete omittantur eum at. Eligendi dissentiet concludaturque ne nec, nam et nisl ornatus voluptatibus, ea prompta fabulas pri.\r\n                </div>  \r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            \r\n        <Col  md={3}></Col>\r\n            <Col md={6}>      \r\n                <div className=\"loginBox\">\r\n                    <Form onSubmit= {e => {\r\n                        e.preventDefault();\r\n                        \r\n                        firebase.auth().signInWithEmailAndPassword(email, password).then(() => {\r\n                            history.push('/chat');\r\n                        \r\n                        }, error => {\r\n                            setLoginError('Server error');\r\n                            console.log(error)\r\n                        });\r\n                    }}>\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>Email address:</Form.Label>\r\n                            <Form.Control type=\"email\" autoFocus placeholder=\"Enter email\" onChange={e => {\r\n                                setEmail(e.target.value);\r\n                            }}\r\n\r\n                            />\r\n                            <Form.Text className=\"text-muted\">\r\n                            Använd samma mejl som du kommunicerat med oss med\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formBasicPassword\">\r\n                            <Form.Label>Password:</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Password\" onChange={setPassword}/>\r\n                        </Form.Group>\r\n                        <Button type=\"submit\">\r\n                            Logga in\r\n                        </Button>\r\n                    </Form>\r\n                </div>\r\n            </Col>\r\n            <Col  md={3}></Col>\r\n\r\n      </Row>\r\n    </Container>\r\n    );\r\n  }\r\n\r\nexport default StartView;","import React from 'react';\r\nimport StartView from './startView.js'\r\n\r\nconst Start = ({email, setEmail, password, setPassword, loginError, setLoginError}) => {\r\n    // Dessa två ska uppdateras och sen skickas till gameController.\r\n    /*const [email, setEmail] = React.useState(\"\");\r\n    const [password, setPassword] = React.useState(\"\");\r\n    \r\n    const updateEmail = e => {\r\n        setEmail(e.target.value);\r\n        console.log(\"I have updated the email! :) It is now: \" + email)\r\n    };*/\r\n\r\n    return <StartView\r\n    email={email}\r\n    setEmail={setEmail}\r\n    password={password}\r\n    setPassword={setPassword}\r\n    loginError={loginError}\r\n    setLoginError={setLoginError}\r\n    />\r\n}\r\n\r\nexport default Start;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst firebase = require('firebase');\r\n\r\nfunction TimerReady({currentUsers}) {\r\n    const [seconds, setSeconds] = useState(0);\r\n    const [limit, setLimit] = useState(300);\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        \r\n        if (seconds >= limit) {\r\n            if (limit === 300) {\r\n                setLimit(60)\r\n            }\r\n\r\n            setSeconds(0);\r\n\r\n            const d = new Date();\r\n            const secondStamp = d.getSeconds();\r\n            const minuteStamp = d.getMinutes();\r\n            const hourStamp = d.getHours();\r\n\r\n            const strSecondStamp = secondStamp < 10 ? `0${secondStamp}` : `${secondStamp}`;\r\n            const strMinuteStamp = minuteStamp < 10 ? `0${minuteStamp}` : `${minuteStamp}`;\r\n            const strHourStamp = hourStamp < 10 ? `0${hourStamp}` : `${hourStamp}`;\r\n            \r\n            firebase\r\n                .firestore()\r\n                .collection('chats')\r\n                .doc(currentUsers)\r\n                .update({\r\n                    messages: firebase.firestore.FieldValue.arrayUnion({\r\n                        sender: 'Admin',\r\n                        message: 'Är ni redo att gå till beslut?',\r\n                        timestamp: `${strHourStamp}:${strMinuteStamp}:${strSecondStamp}`\r\n                    })\r\n                }).then(() => {\r\n                    console.log('Adminmeddelande skapat!')\r\n                })\r\n        }\r\n\r\n        interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n        }, 1000);\r\n        \r\n        return () => clearInterval(interval);\r\n    }, [seconds, currentUsers]);\r\n\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TimerReady;","import React, { useState, useEffect } from 'react';\r\n\r\nfunction Timer({otherChats, handleChange}) {\r\n    const [limit, setLimit] = useState(2);\r\n    const [seconds, setSeconds] = useState(0);\r\n\r\n    function randn_bm(min, max, skew) {\r\n        let u = 0, v = 0;\r\n        while(u === 0) u = Math.random(); //Converting [0,1) to (0,1)\r\n        while(v === 0) v = Math.random();\r\n        let num = Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );\r\n    \r\n        num = num / 10.0 + 0.5; // Translate to 0 -> 1\r\n        if (num > 1 || num < 0) num = randn_bm(min, max, skew); // resample between 0 and 1 if out of range\r\n        num = Math.pow(num, skew); // Skew\r\n        num *= max - min; // Stretch to fill range\r\n        num += min; // offset to min\r\n\r\n        return num;\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        // console.log(`seconds = ${seconds}`)\r\n        // console.log(`limit = ${limit}`)\r\n        console.log(seconds)\r\n\r\n        if (seconds >= limit) {\r\n            setSeconds(0);\r\n            handleChange(otherChats)\r\n            \r\n            const randIntNormal = Math.round(randn_bm(2, 15, 2));\r\n            console.log(randIntNormal, 'rand')\r\n            setLimit(randIntNormal);\r\n        }\r\n\r\n        interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n        }, 1000);\r\n        \r\n        return () => clearInterval(interval);\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Timer;","import React, { useEffect, useState } from 'react';\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport Timer from './Timer';\r\n\r\nfunction OtherTeam () {\r\n    const [otherChats, setOtherChats] = useState([]);\r\n    const invisibleText = '　';\r\n    const otherTeamNames = ['Kristina', 'Anna', 'Robert'];\r\n\r\n    function randn_bm(min, max, skew) {\r\n        let u = 0, v = 0;\r\n        while(u === 0) u = Math.random(); //Converting [0,1) to (0,1)\r\n        while(v === 0) v = Math.random();\r\n        let num = Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );\r\n    \r\n        num = num / 10.0 + 0.5; // Translate to 0 -> 1\r\n        if (num > 1 || num < 0) num = randn_bm(min, max, skew); // resample between 0 and 1 if out of range\r\n        num = Math.pow(num, skew); // Skew\r\n        num *= max - min; // Stretch to fill range\r\n        num += min; // offset to min\r\n\r\n        return num;\r\n    }\r\n    \r\n    const handleChange = (...otherChats) => {\r\n\r\n        let tempArray = otherChats;\r\n        let msg = \"\";\r\n        let randomWhiteSpaces = Math.round(randn_bm(2, 35, 2));\r\n        let randomSender = Math.round(Math.random() * (otherTeamNames.length - 1));\r\n        for (let i = 0; i < randomWhiteSpaces; i++) {\r\n            msg += invisibleText;\r\n        }\r\n        \r\n        const objToPush = {message: msg, sender: otherTeamNames[randomSender]}\r\n        tempArray.push(objToPush)\r\n\r\n        setOtherChats(tempArray)\r\n    }\r\n\r\n    useEffect(() => {\r\n        otherChats.forEach(_message => {\r\n            const messageElement = document.createElement('div');\r\n            const rowElement = document.createElement('div');\r\n            const colElement = document.createElement('div');\r\n            const imgElementOther = document.createElement('img');\r\n\r\n            imgElementOther.src = 'https://images.squarespace-cdn.com/content/v1/5589a812e4b0248058743f7e/1562001389112-WFLCO7JEU2GDDM9ANYXT/ke17ZwdGBToddI8pDm48kMh3mVmBaCAeGwqCLG3iONRZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZamWLI2zvYWH8K3-s_4yszcp2ryTI0HqTOaaUohrI8PITeQtWPcxF65ANawkK25DREOmFck9peR6QL8AnpRiPJE/LAURA+PROFILE+CIRCLE+NEW.png'//_message.senderImgURL\r\n            imgElementOther.className = 'img-element-other'\r\n            rowElement.className = 'row';\r\n            colElement.className = 'col';\r\n            messageElement.innerText = _message.message;\r\n            messageElement.className = 'otherTeamsMessages';\r\n            colElement.append(imgElementOther);\r\n            colElement.append(messageElement)\r\n            rowElement.append(colElement)\r\n            \r\n            // OBS OBS, detta är en så jävla ful lösning, lär dig hur arv funkar mellan komponenter\r\n            if (messageElement.innerText !== 'undefined') {\r\n                \r\n                document.getElementById('chatTextOther').append(rowElement);\r\n\r\n                const objDiv = document.getElementById(\"chatTextOther\");\r\n                objDiv.scrollTop = objDiv.scrollHeight;\r\n            }\r\n            \r\n        })     \r\n    }, [otherChats]) // När otherChats uppdateras ska hela denna komponent uppdateras\r\n\r\n    return (\r\n        <div className=\"chatBox\" id=\"secretChat\">\r\n            <Row>\r\n                <Col>      \r\n                    <div id=\"userinfo\">\r\n                        <b>Motståndarlaget:</b><br/> \r\n                        <img src={\"https://res.cloudinary.com/inbound-org/image/twitter/w_200/189315459.jpg\"} alt=\"\" /> Sven Svensson\r\n                        <img src={\"https://s3-eu-west-1.amazonaws.com/video.gallereplay.com/production/user_108/renauddavies_2704201773733.jpg\"} alt=\"\" /> John Doe\r\n                        <img src={\"https://images.squarespace-cdn.com/content/v1/54bbd50ce4b05e8a36418abc/1533226867020-NALD4HA8GBL3IUIQE9PM/ke17ZwdGBToddI8pDm48kMh3mVmBaCAeGwqCLG3iONRZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZamWLI2zvYWH8K3-s_4yszcp2ryTI0HqTOaaUohrI8PITeQtWPcxF65ANawkK25DREOmFck9peR6QL8AnpRiPJE/rachel-rouhana-profile-picture-circle.png\"} alt=\"\" /> Mary Moe\r\n                    </div>   \r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col>    \r\n                    <div id=\"chatTextOther\">\r\n                        <Timer\r\n                            otherChats = {otherChats}\r\n                            handleChange ={handleChange}\r\n                        />\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OtherTeam;","import React, { useEffect, useState } from 'react';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport {Container, Row, Col, Button, Form} from 'react-bootstrap';\r\nimport TimerReady from './TimerReady';\r\n\r\nimport OtherTeam from './otherTeam';\r\n\r\nconst firebase = require('firebase');\r\n\r\n//import * as ROUTES from '../constants/routes.js';\r\n//^won't be needed\r\n\r\nfunction ChatView({email}) {\r\n    const history = useHistory();\r\n    const [chats, setChats] = useState([]);\r\n    const [name, setName] = useState('');\r\n    const [imgURL, setImgURL] = useState('');\r\n\r\n    useEffect(() => {\r\n        firebase.auth().onAuthStateChanged(async _usr => {\r\n            if (!_usr) { // Om användaren INTE finns --> Skicka användaren till startsidan\r\n                history.push('/');\r\n            } else { \r\n                await firebase // Invänta svar från databseen\r\n                    .firestore() // Firestore är den DB vi använder \r\n                    .collection('chats') // Hämtar collection 'chats'\r\n                    .where('users', 'array-contains', _usr.email) // Välj de chatter vars användare innehåller den aktuella användaren\r\n                    .onSnapshot(async res => {\r\n                        const chats = res.docs.map(_doc => _doc.data());\r\n                        await (\r\n                            setChats(chats)\r\n                        )\r\n                    })\r\n            }\r\n        })\r\n\r\n        firebase\r\n            .firestore()\r\n            .collection('users')\r\n            .doc(email)\r\n            .onSnapshot(function(doc) {\r\n                setName(doc.data().name)\r\n                setImgURL(doc.data().imgURL)\r\n            });\r\n    }, []);\r\n    \r\n    let currentUsers = \"\";\r\n\r\n    chats.filter((_chat, _index) => {\r\n        let bool = false;\r\n\r\n        _chat.users.forEach(user => {\r\n            if (user === email) {\r\n                bool = true;\r\n            }\r\n        })\r\n\r\n        return bool;\r\n    }).forEach((_chat, _index) => {\r\n\r\n        document.getElementById('chatText').innerHTML = \"\";\r\n\r\n        _chat.messages.forEach(_message => { \r\n            const messageElement = document.createElement('div');\r\n            const rowElement = document.createElement('div');\r\n            const colElement = document.createElement('div');\r\n            const imgElement = document.createElement('img');\r\n\r\n            imgElement.src = _message.senderImgURL\r\n\r\n            rowElement.className = 'row';\r\n            colElement.className = 'col';\r\n            \r\n            if (_message.sender === 'Admin') {\r\n                messageElement.className = 'adminMessages';\r\n                messageElement.innerText = ` ${_message.message}`;\r\n                colElement.append(messageElement)\r\n                rowElement.append(colElement)\r\n            } else if (_message.sender === name) {\r\n                const messageContainer = document.createElement('div');\r\n                \r\n                messageContainer.innerHTML = `${_message.timestamp} ${_message.sender} <br />` \r\n                messageElement.innerText = ` ${_message.message}`;\r\n                messageContainer.append(messageElement);\r\n                messageContainer.append(imgElement);\r\n\r\n                messageContainer.className = 'myMessagesBox'\r\n                messageElement.className = 'myMessages';\r\n                colElement.append(messageContainer)\r\n                rowElement.append(colElement)\r\n            } else {\r\n                const messageContainer = document.createElement('div');\r\n\r\n                messageContainer.innerHTML = `${_message.timestamp} ${_message.sender} <br />` \r\n                messageElement.innerText = ` ${_message.message}`;\r\n                messageContainer.append(messageElement);\r\n                messageContainer.append(imgElement);\r\n\r\n                messageContainer.className = 'otherMessagesBox'\r\n                messageElement.className = 'otherMessages';\r\n                colElement.append(messageContainer)\r\n                rowElement.append(colElement)\r\n            }     \r\n\r\n            document.getElementById('chatText').append(rowElement);\r\n        })\r\n\r\n        const objDiv = document.getElementById(\"chatText\");\r\n        objDiv.scrollTop = objDiv.scrollHeight;\r\n\r\n        _chat.users.forEach((user, index, array) => {\r\n            if (index !== array.length - 1) { \r\n                currentUsers += user + \":\"; \r\n            } else {\r\n                currentUsers += user\r\n            }\r\n        })\r\n    })\r\n\r\n    // --------------------\r\n\r\n    var image = \"https://img.freepik.com/free-vector/businessman-profile-cartoon_18591-58479.jpg?size=338&ext=jpg\";\r\n\r\n    \r\n    return (\r\n        <Container className=\"chatContainer\" fluid>\r\n            {/* HEADER   lägg till fluid={true} här uppe om chatterna ska fylla hela skärmen */}\r\n            <Row>\r\n                <Col>\r\n                    <img src={require('../headerTextCards.png')}  alt=\"THE CARD GAME\" id=\"headerimg\"></img>\r\n                </Col>\r\n            </Row> \r\n      \r\n            <Row > {/* ROW FOR THE CHAT WINDOWS */}\r\n                <Col sm={12} lg={6} >  {/* ACTIVE CHAT */}\r\n                    <div className=\"chatBox\">\r\n                        <Row>\r\n                            <Col md={4}>      \r\n                                <div id=\"userinfo\">\r\n                                    <b>Inloggad som:</b><br/> \r\n                                    <img src={image} alt=\"\" /> {name}\r\n                                </div>  \r\n                            </Col>\r\n\r\n                            <Col md={8}>\r\n                                <div id=\"userinfo\">\r\n                                    <b>Lagmedlemmar</b><br/> \r\n                                    <img src={\"https://www.positivelysplendid.com/wp-content/uploads/2013/09/Circle-Crop-Profile-300x300.png\"} alt=\"\" /> Emma Bobsson\r\n                                    <img src={\"https://images.squarespace-cdn.com/content/v1/5589a812e4b0248058743f7e/1562001389112-WFLCO7JEU2GDDM9ANYXT/ke17ZwdGBToddI8pDm48kMh3mVmBaCAeGwqCLG3iONRZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZamWLI2zvYWH8K3-s_4yszcp2ryTI0HqTOaaUohrI8PITeQtWPcxF65ANawkK25DREOmFck9peR6QL8AnpRiPJE/LAURA+PROFILE+CIRCLE+NEW.png\"} alt=\"\" /> Mary Major\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <Col>\r\n                                <TimerReady currentUsers = {currentUsers} />\r\n                                <div id=\"chatText\">\r\n                                    \r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <Col xs={12}>    \r\n                                <div id=\"submitRow\">\r\n                                    <Form onSubmit={e => {\r\n                                        e.preventDefault();\r\n                                        const newMessage = document.getElementById('msg-box').value;\r\n                                        \r\n                                        const d = new Date();\r\n                                        const minuteStamp = d.getMinutes();\r\n                                        const hourStamp = d.getHours();\r\n                                        const strMinuteStamp = minuteStamp < 10 ? `0${minuteStamp}` : `${minuteStamp}`;\r\n                                        const strHourStamp = hourStamp < 10 ? `0${hourStamp}` : `${hourStamp}`;\r\n\r\n                                        firebase\r\n                                            .firestore()\r\n                                            .collection('chats')\r\n                                            .doc(currentUsers)\r\n                                            .update({\r\n                                                messages: firebase.firestore.FieldValue.arrayUnion({\r\n                                                    sender: name,\r\n                                                    message: newMessage,\r\n                                                    timestamp: `${strHourStamp}:${strMinuteStamp}`,\r\n                                                    senderImgURL: imgURL\r\n                                                })\r\n                                            })\r\n\r\n                                        document.getElementById('msg-box').value = '';\r\n                                        document.getElementById(\"msg-box\").focus();\r\n                                    }}>\r\n\r\n                                    <Row>\r\n                                        <Col md={{span:5, offset:4}}>\r\n                                            <Form.Control type=\"text\" id='msg-box' autoFocus />\r\n                                        </Col>\r\n                                        <Col md={{span:2}}>\r\n                                            <Button type=\"submit\">\r\n                                                Skicka\r\n                                            </Button>\r\n                                        </Col>\r\n                                        \r\n                                    </Row>\r\n                                        \r\n                                    </Form>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n\r\n                <Col sm={12} lg={6}> {/* 2ND CHAT */}\r\n                    <OtherTeam />\r\n\r\n                    <div id=\"voteBox\">\r\n                <Row>\r\n                  <Col>\r\n                    <h5>VÄLJ KORT HÄR</h5> Se till att vara överrens i gruppen innan valet görs.\r\n                      Ni väljer kort som ett lag.\r\n                  </Col>\r\n                </Row>\r\n\r\n                  <Row>\r\n                      <Col>\r\n                        <div className=\"inline-block\" ><img src={require('../red_card.png')}/><h6 className=\"inline-block\">RÖTT KORT</h6></div>\r\n                        <div className=\"inline-block\" ><img src={require('../blue_card.png')}/><h6 className=\"inline-block\">BLÅTT KORT</h6></div>\r\n                      </Col>\r\n                  </Row>\r\n              </div>\r\n\r\n                </Col>\r\n\r\n\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col>    \r\n                    <div id=\"logout\"><u>Spelregler</u><Link to=\"/\">Log out</Link></div>\r\n                </Col>\r\n            </Row>\r\n            \r\n        </Container>\r\n    );\r\n  }\r\n\r\nexport default ChatView;\r\n\r\n\r\n","import React from 'react';\r\nimport ChatView from './chatView.js'\r\n\r\nconst Chat = ({emailInChat}) => {\r\n\r\n    return <ChatView\r\n    email = {emailInChat}\r\n    />\r\n}\r\n\r\nexport default Chat;","import React from 'react';\r\n//import './App.css';\r\nimport Start from './start/startContainer.js';\r\nimport Chat from './chat/chatContainer.js';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  const [email, setEmail] = React.useState(\"rrudling@kth.se\");\r\n  const [password, setPassword] = React.useState(\"\");\r\n  const [loginError, setLoginError] = React.useState('');\r\n\r\n  const [emailInChat, setEmailInChat] = React.useState(\"rrudling@kth.se\");\r\n\r\n    React.useEffect( () => {\r\n        setEmailInChat(email);\r\n    }, [email])\r\n  \r\n\r\n  const updatePassword = e => {\r\n    setPassword(e.target.value);\r\n  };\r\n\r\n// Kanske går att lösa på snyggare sätt än att ha ett separat state för chatView.\r\n//  const [emailInChat, setEmailInChat] = React.useState(\"No user\");\r\n\r\n\r\n  return (    \r\n  <Router>\r\n    <Switch>\r\n        <Route exact path=\"/\" >\r\n            <Start \r\n            email = {email}\r\n            setEmail = {setEmail}\r\n            password = {password}\r\n            setPassword = {updatePassword} // Vänster är blir variabelnamnet\r\n            loginError = {loginError}\r\n            setLoginError = {setLoginError}\r\n            />\r\n        </ Route>\r\n        \r\n        <Route exact path=\"/ny_firebase_chatt\" >\r\n          <Start \r\n          email = {email}\r\n          setEmail = {setEmail}\r\n          password = {password}\r\n          setPassword = {updatePassword} // Vänster är blir variabelnamnet\r\n          loginError = {loginError}\r\n          setLoginError = {setLoginError}\r\n          />\r\n        </Route>\r\n        \r\n        <Route exact path=\"/chat\">\r\n          <Chat \r\n          emailInChat = {emailInChat}\r\n          />\r\n        </Route>\r\n    </Switch>\r\n  </Router>\r\n  );\r\n}\r\n// Har installerat react, react-router-dom och react-bootstrap\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst firebase = require('firebase');\r\nrequire('firebase/firestore');\r\n\r\n// Normalt sätt vill man inte lägga sin API-nyckel här men det funkar i testmiljöer\r\nconst firebaseConfig = { \r\n    apiKey: \"AIzaSyAdpOM4Bx2jIRTmqkLdxq2-WysYpZXW_BI\",\r\n    authDomain: \"chatt-app-b6c9a.firebaseapp.com\",\r\n    databaseURL: \"https://chatt-app-b6c9a.firebaseio.com\",\r\n    projectId: \"chatt-app-b6c9a\",\r\n    storageBucket: \"chatt-app-b6c9a.appspot.com\",\r\n    messagingSenderId: \"999297534472\",\r\n    appId: \"1:999297534472:web:5e2d45b432ecd04f385fbd\",\r\n    measurementId: \"G-P2SMFJCGS3\"\r\n  };\r\n\r\nfirebase.initializeApp(firebaseConfig)\r\n\r\nReactDOM.render(\r\n    <App />\r\n    , \r\n    document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}